---
id: http://schemas.taskcluster.net/generic-worker/v1/payload.json#
"$schema": http://json-schema.org/draft-04/schema#
title: Generic worker payload
description: |-
  This schema defines the structure of the `payload` property referred to in a
  Taskcluster Task definition.
type: object
required:
- command
- maxRunTime
additionalProperties: false
properties:
  command:
    title: Commands to run
    type: array
    minItems: 1
    items:
      type: string
    description: |-
      One entry per command (consider each entry to be interpreted as a full line of
      a Windowsâ„¢ .bat file). For example:
      `["set", "echo hello world > hello_world.txt", "set GOPATH=C:\\Go"]`.
  env:
    title: Environment variable mappings. Must be strings.
    description: 'Example: ```{ "PATH": "C:\\Windows\\system32;C:\\Windows", "GOOS":
      "darwin" }```'
    type: object
    additionalProperties:
      type: string
  maxRunTime:
    type: integer
    title: Maximum run time in seconds
    description: Maximum time the task container can run in seconds
    multipleOf: 1
    minimum: 1
    maximum: 86400
  artifacts:
    type: array
    title: Artifacts to be published
    description: |-
      Artifacts to be published. For example:
      `{ "type": "file", "path": "builds\\firefox.exe", "expires": "2015-08-19T17:30:00.000Z" }`
    items:
      type: object
      additionalProperties: false
      properties:
        type:
          title: Artifact upload type.
          type: string
          enum:
          - file
          - directory
          description: |-
            Artifacts can be either an individual `file` or a `directory` containing
            potentially multiple files with recursively included subdirectories.
        path:
          title: Artifact location
          type: string
          description: |-
            Relative path of the file/directory from the task directory. Note this is not an absolute
            path as is typically used in docker-worker, since the absolute task directory name is not
            known when the task is submitted. Example: `dist\regedit.exe`. It doesn't matter if
            forward slashes or backslashes are used.
        name:
          title: Name of the artifact
          type: string
          description: |-
            Name of the artifact, as it will be published. If not set, `path` will be used.
            Conventionally (although not enforced) path elements are forward slash separated. Example:
            `public/build/a/house`. Note, no scopes are required to read artifacts beginning `public/`.
            Artifact names not beginning `public/` are scope-protected (caller requires scopes to
            download the artifact). See the Queue documentation for more information.
        expires:
          title: Expiry date and time
          type: string
          format: date-time
          description: |-
            Date when artifact should expire must be in the future, no earlier than task deadline, but
            no later than task expiry. If not set, defaults to task expiry.
      required:
      - type
      - path
  features:
    title: Feature flags
    description: Feature flags enable additional functionality.
    type: object
    additionalProperties: false
    properties:
      chainOfTrust:
        type: boolean
        title: Enable generation of a openpgp signed Chain of Trust artifact
        description: |-
          An artifact named `public/chainOfTrust.json.asc` should be generated
          which will include information for downstream tasks to build a level
          of trust for the artifacts produced by the task and the environment
          it ran in.
  mounts:
    type: array
    description: Directories and/or files to be mounted
    items:
      title: Mount
      "$ref": "#/definitions/mount"
  osGroups:
    type: array
    title: OS Groups
    description: |-
      A list of OS Groups that the task user should be a member of. Requires
      scope `generic-worker:os-group:<os-group>` for each group listed.
    items:
      type: string
  supersederUrl:
    type: string
    title: Superseder URL
    description: |-
      URL of a service that can indicate tasks superseding this one; the current `taskId`
      will be appended as a query argument `taskId`. The service should return an object with
      a `supersedes` key containing a list of `taskId`s, including the supplied `taskId`. The
      tasks should be ordered such that each task supersedes all tasks appearing later in the
      list.  See
      [superseding](https://docs.taskcluster.net/reference/platform/taskcluster-queue/docs/superseding)
      for more detail.
    format: uri
definitions:
  mount:
    title: Mount
    oneOf:
    - "$ref": "#/definitions/fileMount"
    - "$ref": "#/definitions/writableDirectoryCache"
    - "$ref": "#/definitions/readOnlyDirectory"
  fileMount:
    type: object
    title: File Mount
    properties:
      file:
        title: File
        type: string
        description: The filesystem location to mount the file
      content:
        description: Content of the file to be mounted
        "$ref": "#/definitions/content"
    additionalProperties: false
    required:
    - file
    - content
  writableDirectoryCache:
    type: object
    title: Writable Directory Cache
    properties:
      directory:
        title: Directory Volume
        type: string
        description: The filesystem location to mount the directory volume
      cacheName:
        title: Cache Name
        type: string
        description: Implies a read/write cache directory volume. A unique name
          for the cache volume. Requires scope `generic-worker:cache:<cache-name>`.
          Note if this cache is loaded from an artifact, you will also require
          scope `queue:get-artifact:<artifact-name>` to use this cache.
      content:
        title: Content
        description: Optional content to be preloaded when initially creating the
          cache (if set, `format` must also be provided).
        "$ref": "#/definitions/content"
      format:
        title: Format
        type: string
        description: Archive format of the preloaded content (if `content` provided).
        enum:
        - rar
        - tar.bz2
        - tar.gz
        - zip
    additionalProperties: false
    required:
    - directory
    - cacheName
    dependencies:
      content:
      - format
      format:
      - content
  readOnlyDirectory:
    type: object
    title: Read Only Directory
    properties:
      directory:
        title: Directory
        type: string
        description: The filesystem location to mount the directory volume
      content:
        title: Content
        description: Contents of read only directory.
        "$ref": "#/definitions/content"
      format:
        title: Format
        type: string
        description: Archive format of content for read only directory
        enum:
        - rar
        - tar.bz2
        - tar.gz
        - zip
    additionalProperties: false
    required:
    - directory
    - content
    - format
  content:
    oneOf:
    - title: Artifact Content
      description: Requires scope `queue:get-artifact:<artifact-name>`
      type: object
      properties:
        taskId:
          type: string
          pattern: "^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$"
        artifact:
          type: string
          maxLength: 1024
      additionalProperties: false
      required:
      - taskId
      - artifact
    - title: URL Content
      description: URL to download content from
      type: object
      properties:
        url:
          type: string
          title: URL
          description: URL to download content from
          format: uri
      additionalProperties: false
      required:
      - url
